@using Humanizer
@using Sloth.Core.Extensions
@using Sloth.Core.Models
@using Sloth.Core.Resources
@model Transaction

@{
    ViewBag.Title = "Transaction Details";

    Uri merchantUrl;
    var isUrlValid = Uri.TryCreate(Model.MerchantTrackingUrl, UriKind.Absolute, out merchantUrl);
}


<div class="row txn-detail-wrapper">
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.Id)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.Id</span>
        </div>
    </div>
     <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.TransactionDate)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.TransactionDate.ToPacificTime()</span>
        </div>
    </div>
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.KfsTrackingNumber)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.KfsTrackingNumber</span>
        </div>
    </div>
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.DocumentNumber)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.DocumentNumber</span>
        </div>
    </div>
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.ProcessorTrackingNumber)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.ProcessorTrackingNumber</span>
        </div>
    </div>
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.MerchantTrackingNumber)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.MerchantTrackingNumber</span>
        </div>
    </div>
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.Status)</span>
        </div>
        <div class="txn-detail-result">
                <span class="badge @(TransactionStatuses.GetBadgeClass(Model.Status))">@Model.Status.Humanize(LetterCasing.Title)</span>
            </div>
    </div>
    @{
            if (isUrlValid)
            {
                <div class="txn-detail-row">
            <div class="txn-detail-label">
                <span>@Html.DisplayNameFor(x => x.MerchantTrackingUrl)</span>
            </div>
            <div class="txn-detail-result">
                <span><a href="@Html.Raw(merchantUrl.ToString())" target="_blank">@merchantUrl.ToString()</a></span>
            </div>
        </div>
            }
        }
</div>

<table id="transfers" class="table sloth-table" style="width: 100%">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(x => x.Transfers[0].Id)</th>
            <th>@Html.DisplayNameFor(x => x.Transfers[0].Amount)</th>
            <th>@Html.DisplayNameFor(x => x.Transfers[0].Direction)</th>
            <th>@Html.DisplayNameFor(x => x.Transfers[0].Description)</th>
            <th>@Html.DisplayNameFor(x => x.Transfers[0].Account)</th>
            <th>@Html.DisplayNameFor(x => x.Transfers[0].ObjectCode)</th>
            <th>@Html.DisplayNameFor(x => x.Transfers[0].FiscalYear)</th>
            <th>@Html.DisplayNameFor(x => x.Transfers[0].FiscalPeriod)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in Model.Transfers)
        {
            <tr>
                <td>@t.Id</td>
                <td>@t.Amount.ToString("C")</td>
                <td>
                    <span class="badge @(Transfer.GetDirectionBadgeClass(t.Direction))">@t.Direction</span>
                </td>
                <td>@t.Description</td>
                <td style="white-space:nowrap">@t.FullAccountToString()</td>
                <td>@t.FullObjectToString()</td>
                <td>@t.FiscalYear</td>
                <td>@t.FiscalPeriod</td>
            </tr>
        }
    </tbody>
</table>

<div class="card my-3">
    <div class="card-header d-flex justify-content-between align-items-center cursor-pointer collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#transactionXml">
        <span>Show XML</span>
        <i class="fa fa-fw fa-expand"></i>
    </div>
    <pre id="transactionXml" class="collapse my-0">
<code class="language-markup">
@Model.ToXml()
</code>
</pre>
</div>


@if (Model.Status == TransactionStatuses.PendingApproval)
{
    <form asp-controller="Transactions" asp-action="ScheduleTransaction" asp-route-id="@Model.Id" method="post">
        <div>
            <button type="submit" class="btn btn-primary">Approve Transaction</button>
        </div>
    </form>
}

@if (Model.Status == TransactionStatuses.Completed && !Model.HasReversal)
{
    var reversalAmount = Model.Transfers.Where(x => x.Direction == Transfer.CreditDebit.Credit).Sum(x => x.Amount);

       
        <form asp-controller="Transactions" asp-action="CreateReversal" asp-route-id="@Model.Id" method="post" class="form-inline row">
        <label for="reversalAmount">Reversal Amount</label>
        <div class="col-3"><div class="input-group">
          <div class="input-group-prepend">
            <div class="input-group-text">$</div>
          </div>
          <input type="text" class="form-control" id="reversalAmount" name="reversalAmount" value="@reversalAmount" />
        </div></div>
        <div class="col">
            <button type="submit" class="btn btn-primary">Reverse Transaction</button>
        </div>
        
        
      </form>
       
      
    
}


