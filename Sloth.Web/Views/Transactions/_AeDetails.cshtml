@using Humanizer
@using Sloth.Core.Extensions
@using Sloth.Core.Models
@using Sloth.Core.Resources
@using Sloth.Web.Models.TransactionViewModels
@model TransactionDetailsViewModel

@{
    ViewBag.Title = "Transaction Details";

    Uri merchantUrl;
    var isUrlValid = Uri.TryCreate(Model.Transaction.MerchantTrackingUrl, UriKind.Absolute, out merchantUrl);
}
<div class="row txn-detail-wrapper">
       <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.Transaction.Status)</span>
        </div>
        <div class="txn-detail-result">
            <span class="badge @(TransactionStatuses.GetBadgeClass(Model.Transaction.Status))">@Model.Transaction.Status.Humanize(LetterCasing.Title)</span>
        </div>
    </div>
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.Transaction.Id)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.Transaction.Id</span>
        </div>
    </div>
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.Transaction.TransactionDate)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.Transaction.TransactionDate.ToPacificTime()</span>
        </div>
    </div>
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.Transaction.KfsTrackingNumber)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.Transaction.KfsTrackingNumber</span>
        </div>
    </div>
    @if (Model.Transaction.JournalRequest != null)
    {
        <div class="txn-detail-row">
            <div class="txn-detail-label">
                <span>@Html.DisplayNameFor(x => x.Transaction.JournalRequest.RequestId)</span>
            </div>
            <div class="txn-detail-result">
                <span>@Model.Transaction.JournalRequest.RequestId</span>
            </div>
        </div>
    }
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.Transaction.ProcessorTrackingNumber)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.Transaction.ProcessorTrackingNumber</span>
        </div>
    </div>
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.Transaction.MerchantTrackingNumber)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.Transaction.MerchantTrackingNumber</span>
        </div>
    </div>

    @{
        if (isUrlValid)
        {
            <div class="txn-detail-row">
                <div class="txn-detail-label">
                    <span>@Html.DisplayNameFor(x => x.Transaction.MerchantTrackingUrl)</span>
                </div>
                <div class="txn-detail-result">
                    <span><a href="@Html.Raw(merchantUrl.ToString())" target="_blank">@merchantUrl.ToString()</a></span>
                </div>
            </div>
        }
    }
        @if (Model.Transaction.Description !=null) {
    <div class="txn-detail-row">
        <div class="txn-detail-label">
            <span>@Html.DisplayNameFor(x => x.Transaction.Description)</span>
        </div>
        <div class="txn-detail-result">
            <span>@Model.Transaction.Description</span>
        </div>
    </div>
    }
</div>


<table id="transfers" class="table sloth-table" style="width: 100%">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(x => x.Transaction.Transfers[0].Id)</th>
            <th>@Html.DisplayNameFor(x => x.Transaction.Transfers[0].Amount)</th>
            <th>@Html.DisplayNameFor(x => x.Transaction.Transfers[0].Direction)</th>
            <th>@Html.DisplayNameFor(x => x.Transaction.Transfers[0].Description)</th>
            <th>@Html.DisplayNameFor(x => x.Transaction.Transfers[0].AccountingDate)</th>
            <th>@Html.DisplayNameFor(x => x.Transaction.Transfers[0].Account)</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var t in Model.Transaction.Transfers)
        {
            <tr>
                <td>@t.Id</td>
                <td>@t.Amount.ToString("C")</td>
                <td>
                    <span class="badge @(Transfer.GetDirectionBadgeClass(t.Direction))">@t.Direction</span>
                </td>
                <td>@t.Description</td>
                <td>@t.AccountingDate</td>
                <td style="white-space:nowrap">@t.FinancialSegmentString</td>
            </tr>
        }
    </tbody>
</table>


<div class="row justify-content-start mt-3 mb-3 button-row">
    <div class="col">
@if (true || Model.Transaction.Status == TransactionStatuses.PendingApproval)
{
    var canApprove = Context.HasTeamRole(TeamRole.Approver);
    
    <form asp-controller="Transactions" asp-action="ScheduleTransaction" asp-route-id="@Model.Transaction.Id" method="post">
        <div>
            <button type="submit" class="btn btn-primary" @(!canApprove ? "Disabled" : "")>Approve Transaction</button>
        </div>
    </form>
    
}

@if (true || Model.Transaction.Status == TransactionStatuses.Completed && Model.HasWebhooks)
{
    var canCallWebhook = Context.HasTeamRole(TeamRole.Manager);
    
    <form asp-controller="Transactions" asp-action="CallWebHook" asp-route-id="@Model.Transaction.Id" method="post">
        <div>
            <button type="submit" class="btn btn-warning" @(!canCallWebhook ? "Disabled" : "")>Call Webhook</button>
        </div>
    </form>
    
}

@if (true || Model.Transaction.Status == TransactionStatuses.Rejected || Model.Transaction.IsStale())
{
    var isTeamManager = Context.HasTeamRole(TeamRole.Manager);
    
    <form asp-controller="Transactions" asp-action="Edit" asp-route-id="@Model.Transaction.Id" method="get">
        <div>
            <button type="submit" class="btn btn-warning" @(!isTeamManager ? "Disabled" : "")>Edit Transaction</button>
        </div>
    </form>
    

    
   
        <button type="submit" class="btn btn-warning" @(!isTeamManager ? "Disabled" : "") data-bs-toggle="modal" data-bs-target="#cancel-txn-modal">Cancel Transaction</button>
    
    
}
</div>
</div>

@if (true || Model.Transaction.Status == TransactionStatuses.Completed && !Model.Transaction.HasReversal)
{
    var reversalAmount = Model.Transaction.Transfers.Where(x => x.Direction == Transfer.CreditDebit.Credit).Sum(x => x.Amount);
    var canReverse = Context.HasTeamRole(TeamRole.Manager);

    <form asp-controller="Transactions" asp-action="CreateReversal" asp-route-id="@Model.Transaction.Id" method="post" class="form-inline row">
        <label for="reversalAmount">Reversal Amount</label>
        <div class="col-3">
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">$</div>
                </div>
                <input type="text" class="form-control" id="reversalAmount" name="reversalAmount" value="@reversalAmount" @(!canReverse ? "Disabled" : "") />
            </div>
        </div>
        <div class="col">
            <button type="submit" class="btn btn-primary" @(!canReverse ? "Disabled" : "")>Reverse Transaction</button>
        </div>


    </form>


}

