@using Sloth.Core.Models
@using Sloth.Web.Models.IntegrationViewModels
@model EditIntegrationViewModel

@{
    ViewBag.Title = "Edit Integration";

    var sources = ViewBag.Sources as IEnumerable<Source>;

    var sourceItems = sources?.Select(s => new SelectListItem() { Text = $"{s.Name} {s.Type}", Value = s.Id });

    var types = ViewBag.Types as IEnumerable<string>;
    var typeItems = types?.Select(t => new SelectListItem() { Text = t, Value = t });
}

<div class="container">
    <div class="row">
        <div class="col-lg-6">
<h2>@ViewBag.Title</h2>

    @using (Html.BeginForm(FormMethod.Post))
    {
        <div class="form-group">
            @Html.LabelFor(x => x.SourceId)
            @Html.DropDownListFor(x => x.SourceId, sourceItems, new { @class = "form-control" })
            <span asp-validation-for="SourceId" class="text-danger"></span>
        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.Type)
            @Html.DropDownListFor(x => x.Type, typeItems, new { @class = "form-control" })
            <span asp-validation-for="Type" class="text-danger"></span>
        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.MerchantId)
            @Html.TextBoxFor(x => x.MerchantId, new { @class = "form-control" })
            <span asp-validation-for="MerchantId" class="text-danger"></span>
        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.ReportUserName)
            @Html.TextBoxFor(x => x.ReportUserName, new { @class = "form-control" })
            <span asp-validation-for="ReportUserName" class="text-danger"></span>
        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.ReportPassword)
            @Html.HiddenFor(x => x.ReportPasswordDirty, new { id = "report-password-dirty" })
            <div class="input-group">
                @Html.PasswordFor(x => x.ReportPassword, new { @class = "form-control", value = "password", id = "report-password-input", @readonly = true })
                <div class="input-group-append">
                    <div id="report-password-clear" class="btn btn-danger">
                        <i class="fa fa-edit"></i>
                    </div>
                </div>
            </div>
            <span asp-validation-for="ReportPassword" class="text-danger"></span>
        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.ClearingAccount)
            <div class="input-group">
                @Html.TextBoxFor(x => x.ClearingAccount, new { @class = "form-control force-upper ccoa-edit" })
                <div class="input-group-append">
                    <button id="ccoa-picker-clearing" class="btn btn-primary" type="button">CCOA Picker</button>
                </div>
            </div>
            <span asp-validation-for="ClearingAccount" class="text-danger"></span>
            <small id="emailHelp" class="form-text text-muted">Full GL or PPM string for Aggie Enterprise</small>
        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.HoldingAccount)
            <div class="input-group">
                @Html.TextBoxFor(x => x.HoldingAccount, new { @class = "form-control force-upper ccoa-edit" })
                <div class="input-group-append">
                    <button id="ccoa-picker-holding" class="btn btn-primary" type="button">CCOA Picker</button>
                </div>
            </div>
            <span asp-validation-for="HoldingAccount" class="text-danger"></span>
            <small id="emailHelp" class="form-text text-muted">Full GL or PPM string for Aggie Enterprise</small>
        </div>
        <div class="d-flex justify-content-end align-items-end">
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    }
        </div>
    </div>

</div>

@section AdditionalStyles {
    <style>
      .force-upper{
          text-transform: uppercase;
      }
      .ccoa-edit { }
    </style>
}

@section AdditionalScripts
{
    <script src="https://finjector.ucdavis.edu/finjector.js?v=3" type="text/javascript" asp-add-nonce="true"></script>
    <script>
        $('.ccoa-edit').each((index, elem) => {
            $($(elem).parent()).find('button').on('click', async (e) => {
                const chart = await window.Finjector.findChartSegmentString("https://finjector.ucdavis.edu/landing");
                if (chart && chart.status === "success") {
                    $(elem).val(chart.data);
                }
                else {
                    alert("Something went wrong with the CCOA picker")
                }
                return false;
            });
        });

        $('#report-password-clear').click(function () {
            if ($('#report-password-dirty').val() === 'False') {
                editPassword();
            } else {
                uneditPassword();
            }
        });

        function editPassword() {
            // mark dirty
            $('#report-password-dirty').val('True');

            // make field editable
            $('#report-password-input')
                .removeAttr('readonly')
                .val('')
                .focus();

            // change button
            $('#report-password-clear i.fa').addClass('fa-undo').removeClass('fa-edit');
        }

        function uneditPassword() {
            // mark clean
            $('#report-password-dirty').val('False');

            // make field editable
            $('#report-password-input')
                .attr('readonly', 'readonly')
                .val('password');

            // change button
            $('#report-password-clear i.fa').removeClass('fa-undo').addClass('fa-edit');

        }

        $('#report-password-input').blur(function () {
            $input = $(this);
            if (!$input.val()) {
                uneditPassword();
            }
        })
    </script>
}
