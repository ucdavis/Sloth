@using Humanizer
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Routing
@using Sloth.Core.Extensions
@using Sloth.Core.Models
@using Sloth.Core.Resources
@model Sloth.Web.Models.TransactionViewModels.TransactionsTableViewModel
@inject IHttpContextAccessor HttpContextAccessor

@{
    var teamSlug = HttpContextAccessor.HttpContext.GetRouteData().Values["team"] as string;
}

<table id="transactionsTable" class="table sloth-table active-table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(x => x.Transactions.FirstOrDefault().Id)</th>
             <th>@Html.DisplayNameFor(x => x.Transactions.FirstOrDefault().Status)</th>
            <th>@Html.DisplayNameFor(x => x.Transactions.FirstOrDefault().TransactionDate)</th>
            <th>@Html.DisplayNameFor(x => x.Transactions.FirstOrDefault().KfsTrackingNumber)</th>
            <th>@Html.DisplayNameFor(x => x.Transactions.FirstOrDefault().DocumentNumber)</th>
            <th>@Html.DisplayNameFor(x => x.Transactions.FirstOrDefault().ProcessorTrackingNumber)</th>
            <th>@Html.DisplayNameFor(x => x.Transactions.FirstOrDefault().MerchantTrackingNumber)</th>
            <th>@Html.DisplayNameFor(x => x.Transactions.FirstOrDefault().Description)</th>
            <th>Team</th>



        </tr>
    </thead>
    <tbody>
        @foreach (var t in Model.Transactions)
        {
            var firstDebit = t.Transfers.First(x => x.Direction == Transfer.CreditDebit.Debit);
            var firstCredit = t.Transfers.First(x => x.Direction == Transfer.CreditDebit.Credit);
            var description = firstDebit.Description;
            if(!string.IsNullOrWhiteSpace(t.Description))
            {
                description = t.Description;
            }

            var slug = !string.IsNullOrWhiteSpace(teamSlug) && teamSlug != "any" ? teamSlug : t.Source?.Team?.Slug;

            <tr data-href="/@slug/Transactions/Details/@t.Id">
                <th scope="row">@t.Id</th>
                <td>
                    <span class="badge @(TransactionStatuses.GetBadgeClass(t.Status))">@t.Status.Humanize(LetterCasing.Title)</span>
                    <a class="stretched-link hide-me" href="/@slug/Transactions/Details/@t.Id">a</a>
                </td>
                <td nowrap data-sort="@t.TransactionDate.Ticks">@t.TransactionDate.ToPacificTime()</td>
                <td>@t.KfsTrackingNumber</td>
                <td>@t.DocumentNumber</td>
                <td>@t.ProcessorTrackingNumber</td>
                <td>@t.MerchantTrackingNumber</td>
                <td>@description</td>
                <td>@slug </td>
                @* @if (String.IsNullOrWhiteSpace(firstDebit.FinancialSegmentString))
                {
                    <td>@($"{firstDebit.Chart}-{firstDebit.Account}") -> @($"{firstCredit.Chart}-{firstCredit.Account}")</td>
                }
                else
                {
                    <td>See Details</td>
                }
                 *@
            </tr>
        }
    </tbody>
</table>
