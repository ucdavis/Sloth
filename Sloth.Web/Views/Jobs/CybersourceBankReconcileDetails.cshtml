@using Newtonsoft.Json
@model Sloth.Core.Models.CybersourceBankReconcileJobRecord

@{
    ViewData["Title"] = "Cybersource Bank Reconcile Details";
}

@section AdditionalStyles
    {
    <link href="~/css/prism.css" rel="stylesheet" />
    <style>
        .console {
            font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
            background-color: #0d3163;
            color: #ffffff;
        }

            .console .line {
                margin: 0;
                line-height: 1.4em;
                min-height: 1.4em;
                font-size: 0.85em;
                word-break: normal;
                overflow-wrap: break-word;
                white-space: pre-wrap;
                vertical-align: top;
            }

            .console .line .time {
                text-align: right;
            }

            .console .line .details {
                text-align: right;
            }

            .console .line .details i {
                display: none;
                cursor: pointer;
            }

            .console .line:hover .details i {
                display: inline-block;
            }
    </style>
}

<h2>@ViewData["Title"]</h2>

<div>
    <h4>CybersourceBankReconcileJobRecord</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.RanOn)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.RanOn)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.ProcessedDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.ProcessedDate)
        </dd>
    </dl>
</div>

<div class="console">
    @foreach (var log in Model.Logs.OrderBy(l => l.Id))
    {
        var time = log.TimeStamp.UtcDateTime - Model.RanOn;
        var timeFormatted = $"{time.TotalSeconds:F3}s";
        if (time < TimeSpan.FromSeconds(1))
        {
            timeFormatted = $"{time.TotalMilliseconds:#}ms";
        }

        <div class="row line">
            <div class="col-1 time">@(timeFormatted)</div>
            <div class="col-10 message">@log.Message</div>
            <div class="col-1 details"><i class="fas fa-search fa-xs" data-toggle="modal" data-target="#detailsModal" data-log-id="@log.Id"></i></div>
        </div>
    }
</div>

<div>
    <a asp-action="CybersourceBankReconcile">Back to List</a>
</div>

<div class="modal" tabindex="-1" role="dialog" id="detailsModal">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Log Message Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <pre><code id="detailsModalJson" class="language-json"></code></pre>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section AdditionalScripts
{
    <script src="~/js/prism.js"></script>
    <script>
        var logs = @Html.Raw(JsonConvert.SerializeObject(Model.Logs));

        $(function () {
            var $json = $('#detailsModalJson');

            $('#detailsModal').on('show.bs.modal',
                function(event) {
                    var button = $(event.relatedTarget);
                    var id = button.data('log-id');
                    var log = logs.find(function(l) { return l.Id === id; });

                    // try parse log event
                    try {
                        var properties = JSON.parse(log.LogEvent);
                        log.LogEventParsed = properties;
                    } catch (err) {
                        // nom
                    }

                    $json.text(JSON.stringify(log, undefined, 4));
                    Prism.highlightAll();
                });
        });
    </script>
}
