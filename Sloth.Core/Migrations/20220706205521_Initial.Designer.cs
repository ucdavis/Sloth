// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sloth.Core;

#nullable disable

namespace Sloth.Core.Migrations
{
    [DbContext(typeof(SlothDbContext))]
    [Migration("20220706205521_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("Document_Number_Seq")
                .HasMin(1L)
                .HasMax(999999999L)
                .IsCyclic();

            modelBuilder.HasSequence("KFS_Tracking_Number_Seq")
                .HasMin(1L)
                .HasMax(9999999999L)
                .IsCyclic();

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sloth.Core.Domain.CybersourceBankReconcileJobBlob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlobId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CybersourceBankReconcileJobRecordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IntegrationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlobId");

                    b.HasIndex("CybersourceBankReconcileJobRecordId");

                    b.HasIndex("IntegrationId");

                    b.ToTable("CybersourceBankReconcileJobBlobs");
                });

            modelBuilder.Entity("Sloth.Core.Models.ApiKey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("ApiKeys", (string)null);
                });

            modelBuilder.Entity("Sloth.Core.Models.Blob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FileName");

                    b.HasIndex("UploadedDate");

                    b.HasIndex("Uri");

                    b.ToTable("Blobs");
                });

            modelBuilder.Entity("Sloth.Core.Models.CybersourceBankReconcileJobRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RanOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CybersourceBankReconcileJobRecords");
                });

            modelBuilder.Entity("Sloth.Core.Models.Integration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClearingAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoldingAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportPasswordKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("TeamId");

                    b.ToTable("Integrations");
                });

            modelBuilder.Entity("Sloth.Core.Models.KfsScrubberUploadJobRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RanOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KfsScrubberUploadJobRecords");
                });

            modelBuilder.Entity("Sloth.Core.Models.LogMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("xml");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("JobId");

                    b.HasIndex("Source");

                    b.HasIndex("JobName", "JobId");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Sloth.Core.Models.Scrubber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BatchSequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("BlobId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlobId");

                    b.HasIndex("SourceId");

                    b.ToTable("Scrubbers");
                });

            modelBuilder.Entity("Sloth.Core.Models.Source", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Chart")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("KfsFtpPasswordKeyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KfsFtpUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrganizationCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("OriginCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Sloth.Core.Models.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KfsContactDepartmentName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("KfsContactEmail")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("KfsContactMailingAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("KfsContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("KfsContactUserId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("Sloth.Core.Models.TeamRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("TeamRoles");
                });

            modelBuilder.Entity("Sloth.Core.Models.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CybersourceBankReconcileJobRecordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("KfsScrubberUploadJobRecordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KfsTrackingNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MerchantTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantTrackingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessorTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReversalOfTransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReversalTransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScrubberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CybersourceBankReconcileJobRecordId");

                    b.HasIndex("KfsScrubberUploadJobRecordId");

                    b.HasIndex("ReversalOfTransactionId")
                        .IsUnique()
                        .HasFilter("[ReversalOfTransactionId] IS NOT NULL");

                    b.HasIndex("ReversalTransactionId")
                        .IsUnique()
                        .HasFilter("[ReversalTransactionId] IS NOT NULL");

                    b.HasIndex("ScrubberId");

                    b.HasIndex("SourceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Sloth.Core.Models.TransactionStatusEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventDate");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionStatusEvents");
                });

            modelBuilder.Entity("Sloth.Core.Models.Transfer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Chart")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<int?>("FiscalPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("FiscalYear")
                        .HasColumnType("int");

                    b.Property<string>("ObjectCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Project")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("SubAccount")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SubObjectCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Sloth.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Sloth.Core.Models.UserTeamRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId", "TeamId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeamRoles", (string)null);
                });

            modelBuilder.Entity("Sloth.Core.Models.WebHook", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("WebHooks");
                });

            modelBuilder.Entity("Sloth.Core.Models.WebHookRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastRequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Persist")
                        .HasColumnType("bit");

                    b.Property<int?>("RequestCount")
                        .HasColumnType("int");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatus")
                        .HasColumnType("int");

                    b.Property<string>("WebHookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebHookRequestResendJobId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LastRequestDate");

                    b.HasIndex("ResponseStatus");

                    b.HasIndex("WebHookId");

                    b.HasIndex("WebHookRequestResendJobId");

                    b.ToTable("WebHookRequests");
                });

            modelBuilder.Entity("Sloth.Core.Models.WebHookRequestResendJobRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RanOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebHookRequestResendJobRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sloth.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sloth.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sloth.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sloth.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sloth.Core.Domain.CybersourceBankReconcileJobBlob", b =>
                {
                    b.HasOne("Sloth.Core.Models.Blob", "Blob")
                        .WithMany("CybersourceBankReconcileJobBlobs")
                        .HasForeignKey("BlobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.CybersourceBankReconcileJobRecord", "CybersourceBankReconcileJobRecord")
                        .WithMany("CybersourceBankReconcileJobBlobs")
                        .HasForeignKey("CybersourceBankReconcileJobRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.Integration", "Integration")
                        .WithMany("CybersourceBankReconcileJobBlobs")
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Blob");

                    b.Navigation("CybersourceBankReconcileJobRecord");

                    b.Navigation("Integration");
                });

            modelBuilder.Entity("Sloth.Core.Models.ApiKey", b =>
                {
                    b.HasOne("Sloth.Core.Models.Team", "Team")
                        .WithMany("ApiKeys")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Sloth.Core.Models.Integration", b =>
                {
                    b.HasOne("Sloth.Core.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sloth.Core.Models.Team", "Team")
                        .WithMany("Integrations")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Sloth.Core.Models.LogMessage", b =>
                {
                    b.HasOne("Sloth.Core.Models.CybersourceBankReconcileJobRecord", null)
                        .WithMany("Logs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.KfsScrubberUploadJobRecord", null)
                        .WithMany("Logs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.WebHookRequestResendJobRecord", null)
                        .WithMany("Logs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sloth.Core.Models.Scrubber", b =>
                {
                    b.HasOne("Sloth.Core.Models.Blob", "Blob")
                        .WithMany("Scrubbers")
                        .HasForeignKey("BlobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blob");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Sloth.Core.Models.Source", b =>
                {
                    b.HasOne("Sloth.Core.Models.Team", "Team")
                        .WithMany("Sources")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Sloth.Core.Models.Transaction", b =>
                {
                    b.HasOne("Sloth.Core.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Sloth.Core.Models.CybersourceBankReconcileJobRecord", "CybersourceBankReconcileJob")
                        .WithMany("Transactions")
                        .HasForeignKey("CybersourceBankReconcileJobRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.KfsScrubberUploadJobRecord", "KfsScrubberUploadJob")
                        .WithMany("Transactions")
                        .HasForeignKey("KfsScrubberUploadJobRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.Transaction", "ReversalOfTransaction")
                        .WithOne()
                        .HasForeignKey("Sloth.Core.Models.Transaction", "ReversalOfTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.Transaction", "ReversalTransaction")
                        .WithOne()
                        .HasForeignKey("Sloth.Core.Models.Transaction", "ReversalTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.Scrubber", "Scrubber")
                        .WithMany("Transactions")
                        .HasForeignKey("ScrubberId");

                    b.HasOne("Sloth.Core.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("CybersourceBankReconcileJob");

                    b.Navigation("KfsScrubberUploadJob");

                    b.Navigation("ReversalOfTransaction");

                    b.Navigation("ReversalTransaction");

                    b.Navigation("Scrubber");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Sloth.Core.Models.TransactionStatusEvent", b =>
                {
                    b.HasOne("Sloth.Core.Models.Transaction", "Transaction")
                        .WithMany("StatusEvents")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Sloth.Core.Models.Transfer", b =>
                {
                    b.HasOne("Sloth.Core.Models.Transaction", "Transaction")
                        .WithMany("Transfers")
                        .HasForeignKey("TransactionId");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Sloth.Core.Models.UserTeamRole", b =>
                {
                    b.HasOne("Sloth.Core.Models.TeamRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sloth.Core.Models.Team", "Team")
                        .WithMany("UserTeamRoles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sloth.Core.Models.User", "User")
                        .WithMany("UserTeamRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sloth.Core.Models.WebHook", b =>
                {
                    b.HasOne("Sloth.Core.Models.Team", "Team")
                        .WithMany("WebHooks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Sloth.Core.Models.WebHookRequest", b =>
                {
                    b.HasOne("Sloth.Core.Models.WebHook", "WebHook")
                        .WithMany("WebHookrequests")
                        .HasForeignKey("WebHookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sloth.Core.Models.WebHookRequestResendJobRecord", "WebHookRequestResendJob")
                        .WithMany("WebHookRequests")
                        .HasForeignKey("WebHookRequestResendJobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WebHook");

                    b.Navigation("WebHookRequestResendJob");
                });

            modelBuilder.Entity("Sloth.Core.Models.Blob", b =>
                {
                    b.Navigation("CybersourceBankReconcileJobBlobs");

                    b.Navigation("Scrubbers");
                });

            modelBuilder.Entity("Sloth.Core.Models.CybersourceBankReconcileJobRecord", b =>
                {
                    b.Navigation("CybersourceBankReconcileJobBlobs");

                    b.Navigation("Logs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Sloth.Core.Models.Integration", b =>
                {
                    b.Navigation("CybersourceBankReconcileJobBlobs");
                });

            modelBuilder.Entity("Sloth.Core.Models.KfsScrubberUploadJobRecord", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Sloth.Core.Models.Scrubber", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Sloth.Core.Models.Team", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Integrations");

                    b.Navigation("Sources");

                    b.Navigation("UserTeamRoles");

                    b.Navigation("WebHooks");
                });

            modelBuilder.Entity("Sloth.Core.Models.Transaction", b =>
                {
                    b.Navigation("StatusEvents");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Sloth.Core.Models.User", b =>
                {
                    b.Navigation("UserTeamRoles");
                });

            modelBuilder.Entity("Sloth.Core.Models.WebHook", b =>
                {
                    b.Navigation("WebHookrequests");
                });

            modelBuilder.Entity("Sloth.Core.Models.WebHookRequestResendJobRecord", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("WebHookRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
